# Categorical Co-occurrences

`catcoocc` is a library for facilitating the analysis of categorical
co-occurrence by means of symmetric matrices, asymmetric matrices, and
association rules. It is intended for usage on three main types of data:
collections of pairwise sequences (both aligned and not), categorical
fields in databases, and matrices of presence/absence (such as for
investigation of species co-occurrence in biology).
More than statistical significance, interested in effect size and strength
of association.

For the purposes of the library, the following definitions are used:

  - a co-occurrence is an observation of two categorical elements from
    two different series
  - a population is a collection of co-occurrences which can come from
    the product of elements observed in two sequences (or, if the sequences
    are aligned, by n-gram windows), by the properties of an individual
    in a population, or by the product of presences
  - a scorer is a collection of association measures between all the
    possible products of values in alphabet_x and alphabet_y (including
    those not observed in the data)
    - scorers can be computed according to different methods (such as MLE...),
      either on raw counts of observed data or on smoothed methods; likewise,
      the output of scorers can be scaled in different ways
    - scorers can be symmetric (such as those coming from chi2 methods)
      or assymetric (such a Theil U), and can be either restricted to
      positive values or include negative values, and can be bound or not
      to a range  



```python
# Import 3rd party libraries
from matplotlib import pyplot as plt
import pandas as pd
import numpy as np
import seaborn as sns

# Import own libraries
import catcoocc
from catcoocc.scorer import CatScorer
```





Let's start exploring using a subset of the mushroom dataset.

    | class     | cap-shape |
    |-----------|-----------|
    | poisonous | convex    |
    | edible    | convex    |
    | edible    | bell      |
    | poisonous | convex    |
    | edible    | convex    |
    | edible    | convex    |
    | edible    | bell      |
    | edible    | bell      |
    | poisonous | convex    |
    | edible    | bell      |
    | edible    | convex    |
    | edible    | convex    |
    | edible    | bell      |
    | poisonous | convex    |
    | edible    | convex    |
    | edible    | sunken    |
    | edible    | flat      |
    | poisonous | convex    |
    | poisonous | convex    |
    | poisonous | convex    |



```python

toy_data = catcoocc.read_sequences("docs/mushroom-small.tsv")
toy_cooccs = catcoocc.collect_cooccs(toy_data)

print(len(toy_data), len(toy_cooccs))

scorer = catcoocc.scorer.CatScorer(toy_cooccs)
mle = scorer.mle()
pmi = scorer.pmi()
npmi = scorer.pmi(True)
chi2 = scorer.chi2()
chi2_ns = scorer.chi2(False)
cramersv = scorer.cramers_v()
cramersv_ns = scorer.cramers_v(False)
#fisher = scorer.fisher()
theil_u = scorer.theil_u()
catcoocc_i = scorer.catcoocc_i()
catcoocc_ii = scorer.catcoocc_ii()


for pair in sorted(scorer.obs):
    print("--", pair)
    print("  mle        \t%0.4f %0.4f" % mle[pair])
    print("  pmi        \t%0.4f %0.4f" % pmi[pair])
    print("  npmi       \t%0.4f %0.4f" % npmi[pair])
    print("  chi2       \t%0.4f %0.4f" % chi2[pair])
    print("  chi2_ns    \t%0.4f %0.4f" % chi2_ns[pair])
    print("  cramersv   \t%0.4f %0.4f" % cramersv[pair])
    print("  cramersv_ns\t%0.4f %0.4f" % cramersv_ns[pair])
#    print("  fisher     \t%0.4f %0.4f" % fisher[pair])
    print("  theil_u    \t%0.4f %0.4f" % theil_u[pair])
    print("  catcoocc_i \t%0.4f %0.4f" % catcoocc_i[pair])
    print("  catcoocc_ii\t%0.4f %0.4f" % catcoocc_ii[pair])
```

```
20 20
-- ('edible', 'bell')
  mle           0.3846 1.0000
  pmi           0.4308 0.4308
  npmi          0.3107 0.3107
  chi2          1.8315 1.8315
  chi2_ns       3.5897 3.5897
  cramersv      0.2027 0.2027
  cramersv_ns   0.1987 0.1987
  theil_u       1.0000 0.3985
  catcoocc_i    0.4308 0.1717
  catcoocc_ii   0.7890 0.7890
-- ('edible', 'convex')
  mle           0.4615 0.4615
  pmi           -0.3424 -0.3424
  npmi          -0.2844 -0.2844
  chi2          3.6735 3.6735
  chi2_ns       5.7988 5.7988
  cramersv      0.3719 0.3719
  cramersv_ns   0.3101 0.3101
  theil_u       0.2955 0.1823
  catcoocc_i    -0.1012 -0.0624
  catcoocc_ii   -1.2578 -1.2578
-- ('edible', 'flat')
  mle           0.0769 1.0000
  pmi           0.4308 0.4308
  npmi          0.1438 0.1438
  chi2          0.1041 0.1041
  chi2_ns       0.5668 0.5668
  cramersv      0.0000 0.0000
  cramersv_ns   0.0000 0.0000
  theil_u       1.0000 1.0000
  catcoocc_i    0.4308 0.4308
  catcoocc_ii   0.0448 0.0448
-- ('edible', 'sunken')
  mle           0.0769 1.0000
  pmi           0.4308 0.4308
  npmi          0.1438 0.1438
  chi2          0.1041 0.1041
  chi2_ns       0.5668 0.5668
  cramersv      0.0000 0.0000
  cramersv_ns   0.0000 0.0000
  theil_u       1.0000 1.0000
  catcoocc_i    0.4308 0.4308
  catcoocc_ii   0.0448 0.0448
-- ('poisonous', 'bell')
  mle           0.0000 0.0000
  pmi           -3.5553 -3.5553
  npmi          -0.5934 -0.5934
  chi2          1.8315 1.8315
  chi2_ns       3.5897 3.5897
  cramersv      0.2027 0.2027
  cramersv_ns   0.1987 0.1987
  theil_u       1.0000 1.0000
  catcoocc_i    -3.5553 -3.5553
  catcoocc_ii   -6.5116 -6.5116
-- ('poisonous', 'convex')
  mle           1.0000 0.5385
  pmi           0.4308 0.4308
  npmi          0.4103 0.4103
  chi2          3.6735 3.6735
  chi2_ns       5.7988 5.7988
  cramersv      0.3719 0.3719
  cramersv_ns   0.3101 0.3101
  theil_u       0.0105 1.0000
  catcoocc_i    0.0045 0.4308
  catcoocc_ii   1.5825 1.5825
-- ('poisonous', 'flat')
  mle           0.0000 0.0000
  pmi           -1.9459 -1.9459
  npmi          -0.3248 -0.3248
  chi2          0.1041 0.1041
  chi2_ns       0.5668 0.5668
  cramersv      0.0000 0.0000
  cramersv_ns   0.0000 0.0000
  theil_u       1.0000 1.0000
  catcoocc_i    -1.9459 -1.9459
  catcoocc_ii   -0.2026 -0.2026
-- ('poisonous', 'sunken')
  mle           0.0000 0.0000
  pmi           -1.9459 -1.9459
  npmi          -0.3248 -0.3248
  chi2          0.1041 0.1041
  chi2_ns       0.5668 0.5668
  cramersv      0.0000 0.0000
  cramersv_ns   0.0000 0.0000
  theil_u       1.0000 1.0000
  catcoocc_i    -1.9459 -1.9459
  catcoocc_ii   -0.2026 -0.2026
```





And now more



```python

def plot_scorer(scorer, alpha_x, alpha_y, title=None, figsize=(25, 25)):
    if not title:
        title = ""

    matrix = pd.DataFrame(scorer, index=alpha_y, columns=alpha_x)

    sns.set(font_scale=2, font="FreeMono")
    plt.figure(figsize=figsize)

    ax = plt.subplot(111)
    sns.heatmap(matrix, annot=True, fmt='.2f', linewidths=.5, center=0, ax=ax).set_title(title, fontsize=100)

xy, yx, alpha_x, alpha_y = catcoocc.scorer.scorer2matrices(catcoocc_ii)
plot_scorer(xy, alpha_x, alpha_y, "x->y", (50, 50))
```

![](figures/report_figure3_1.png)\


another



```python
plot_scorer(yx, alpha_y, alpha_x, "y->x", (50, 50))
```

![](figures/report_figure4_1.png)\



leftover



```python

print("ok")
print(dir(catcoocc))



np.random.seed(0)
sns.set(font_scale=2.5)
uniform_data = np.random.rand(10, 12)

plt.figure(figsize=(25, 25))
ax = plt.subplot(111)
sns.heatmap(uniform_data,
annot=True,
linewidths=.5, center=0, ax=ax)
```

```
ok
['Counter', '__author__', '__builtins__', '__cached__', '__doc__',
'__email__', '__file__', '__loader__', '__name__', '__package__',
'__path__', '__spec__', '__version__', 'build_ct', 'chain',
'collect_alphabets', 'collect_cooccs', 'collect_ngrams',
'collect_observations', 'combinations', 'csv', 'np', 'product',
'read_pa_matrix', 'read_sequences', 'scorer', 'utils']
```

```
<matplotlib.axes._subplots.AxesSubplot at 0x7f4304631a58>
```

![](figures/report_figure5_1.png)\


the end
