[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "asymcat"
version = "0.3.1"
description = "A Python library for obtaining asymmetric measures of association between categorical variables in data exploration and description"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Tiago Tresoldi"}
]
classifiers = [
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Topic :: Scientific/Engineering :: Mathematics",
    "Topic :: Software Development :: Libraries",
]
requires-python = ">=3.10"
dependencies = [
    "freqprob",
    "matplotlib",
    "numpy",
    "pandas",
    "scipy",
    "seaborn",
    "tabulate",
]

[project.optional-dependencies]
# Testing dependencies
test = [
    "pytest >= 7.0.0",
    "pytest-cov >= 4.0.0",
    "pytest-xdist >= 3.0.0",  # parallel test execution
    "pytest-mock >= 3.10.0",  # improved mocking
]

# Code quality and formatting
lint = [
    "black >= 23.0.0",
    "isort >= 5.12.0",
    "flake8 >= 6.0.0",
    "flake8-docstrings >= 1.7.0",
    "flake8-bugbear >= 23.0.0",
]

# Type checking
typecheck = [
    "mypy >= 1.5.0",
    "types-tabulate >= 0.9.0",
    "types-setuptools >= 68.0.0",
]

# Security scanning
security = [
    "bandit[toml] >= 1.7.0",
    "safety >= 2.3.0",
]

# Development tools
dev-tools = [
    "pre-commit >= 3.4.0",
    "build >= 0.10.0",
    "twine >= 4.0.0",
    "bump2version >= 1.0.0",
]

# Documentation
docs = [
    "sphinx >= 7.0.0",
    "sphinx-rtd-theme >= 1.3.0",
    "myst-parser >= 2.0.0",
    "sphinx-autodoc-typehints >= 1.24.0",
    "sphinx-copybutton >= 0.5.0",
    "sphinx-design >= 0.5.0",
]

# Jupyter and notebooks (for examples and tutorials)
jupyter = [
    "jupyter >= 1.0.0",
    "jupyterlab >= 4.0.0",
    "ipywidgets >= 8.0.0",
    "notebook >= 7.0.0",
]

# Performance profiling and benchmarking
performance = [
    "pytest-benchmark >= 4.0.0",
    "memory-profiler >= 0.61.0",
    "line-profiler >= 4.0.0",
]

# Visualization extras (beyond core dependencies)
viz = [
    "plotly >= 5.15.0",
    "bokeh >= 3.2.0",
    "altair >= 5.0.0",
]

# All development dependencies combined
dev = [
    "asymcat[test,lint,typecheck,security,dev-tools]",
]

# All dependencies for comprehensive development environment
all = [
    "asymcat[test,lint,typecheck,security,dev-tools,docs,jupyter,performance,viz]",
]

[project.urls]
Homepage = "http://github.com/tresoldi/asymcat"
Repository = "http://github.com/tresoldi/asymcat"

[project.scripts]
asymcat = "asymcat.__main__:main"

[tool.hatch.build.targets.wheel]
packages = ["asymcat"]

[tool.hatch.build.targets.sdist]
include = [
    "asymcat/",
    "docs/",
    "resources/",
    "scripts/",
    "tests/",
    "README.md",
    "LICENSE",
    "AUTHORS.md",
    "CHANGELOG.md",
    "pyproject.toml",
    "requirements.txt",
    "Makefile",
    "CLAUDE.md",
    "DEVELOPER.md",
]

[tool.hatch.build.targets.wheel.shared-data]
"docs" = "docs"
"resources" = "resources"
"scripts" = "scripts"

[tool.hatch.version]
path = "asymcat/__init__.py"

[tool.hatch.envs.default]
dependencies = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-xdist>=3.0.0",
    "pytest-mock>=3.10.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "bandit[toml]>=1.7.0",
    "safety>=2.3.0",
]

[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "pytest --cov=asymcat --cov-branch --cov-report=html --cov-report=term {args:tests}"
format = ["black {args:.}", "isort {args:.}"]
format-check = ["black --check {args:.}", "isort --check-only {args:.}"]
lint = "flake8 {args:asymcat tests}"
typecheck = "mypy {args:asymcat}"
security = ["bandit -r asymcat/", "safety check"]
all-checks = ["format-check", "lint", "typecheck", "security", "test-cov"]

[tool.hatch.envs.docs]
dependencies = [
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=1.3.0",
    "myst-parser>=2.0.0",
    "sphinx-autodoc-typehints>=1.24.0",
    "sphinx-copybutton>=0.5.0",
    "sphinx-design>=0.5.0",
]

[tool.hatch.envs.docs.scripts]
build = "sphinx-build -b html docs/source docs/build"
clean = "rm -rf docs/build"
serve = "python -m http.server 8000 -d docs/build"

[tool.hatch.envs.notebooks]
dependencies = [
    "jupyter>=1.0.0",
    "jupyterlab>=4.0.0",
    "ipywidgets>=8.0.0",
    "notebook>=7.0.0",
    "nbconvert>=7.0.0",
]

[tool.hatch.envs.notebooks.scripts]
execute-all = """
for notebook in docs/*.ipynb; do
    echo "Executing: $notebook"
    jupyter nbconvert --to notebook --execute --inplace "$notebook"
done
"""
check-outputs = """
for notebook in docs/*.ipynb; do
    size=$(stat --format="%s" "$notebook" 2>/dev/null || stat -f%z "$notebook")
    if [ "$size" -lt 30000 ]; then
        echo "❌ $notebook: $size bytes (missing outputs)"
        exit 1
    else
        echo "✅ $notebook: $size bytes (has outputs)"
    fi
done
"""

[tool.black]
preview = true
line-length = 120
skip-string-normalization = true

[tool.isort]
profile = "black"

[tool.flake8]
max-line-length = 120
extend-ignore = ["E203", "W503"]

[tool.bandit]
exclude_dirs = ["tests", "test"]
skips = ["B101"]  # Skip assert_used test since assertions are acceptable in tests

[tool.coverage.report]
exclude_lines = [
    "if __name__ == '__main__':",
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
]
