name: build

on: [push, pull_request]

permissions:
  contents: read
  security-events: write

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          cache: 'pip'
      - name: Install Dependencies
        run: make install
      - name: Check code quality with ruff
        run: make ruff-check

  security:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          cache: 'pip'
      - name: Install Security Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ".[security]"
      - name: Run Bandit Security Scan
        run: |
          bandit -r asymcat/ -f json -o bandit-report.json || true
          bandit -r asymcat/ --exit-zero
      - name: Run Safety Check
        run: |
          safety check --json --output safety-report.json || true
          safety check
      - name: Upload Security Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  dependency-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          cache: 'pip'
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pip-audit pip-licenses
      - name: Audit Dependencies for Vulnerabilities
        run: |
          pip-audit --format=json --output=pip-audit-report.json . || true
          pip-audit .
      - name: Check Dependency Licenses
        run: |
          pip-licenses --format=json --output-file=licenses-report.json || true
          pip-licenses --format=table
      - name: Upload Dependency Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dependency-reports
          path: |
            pip-audit-report.json
            licenses-report.json

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        pythonversion: ["3.10", "3.11", "3.12"]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.pythonversion }}
          cache: 'pip'
      - name: Install Dependencies
        run: make install
      - name: Run tests
        run: make coverage
      - name: Coveralls
        if: github.ref == 'refs/heads/master'
        uses: coverallsapp/github-action@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path-to-lcov: "./coverage.lcov"

  notebooks:
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          cache: 'pip'
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[jupyter]"
          pip install nbconvert jupyter
      - name: Execute All Notebooks
        run: |
          echo "üîÑ Executing all Jupyter notebooks to verify they work..."
          # Execute notebooks and verify they complete without errors
          for notebook in docs/*.ipynb; do
            echo "Executing: $notebook"
            timeout 300 jupyter nbconvert --to notebook --execute --inplace "$notebook" || {
              echo "‚ùå Failed to execute: $notebook"
              exit 1
            }
          done
          echo "‚úÖ All notebooks executed successfully"
      - name: Check Notebook Outputs
        run: |
          echo "üìä Verifying notebook outputs are present..."
          # Check that all notebooks have substantial content (indicating execution)
          for notebook in docs/*.ipynb; do
            size=$(stat --format="%s" "$notebook")
            if [ "$size" -lt 30000 ]; then
              echo "‚ùå Notebook appears to lack execution outputs: $notebook (size: $size bytes)"
              exit 1
            else
              echo "‚úÖ $notebook: $size bytes (has outputs)"
            fi
          done
          echo "üéâ All notebooks have executed outputs"
      - name: Upload Executed Notebooks
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: executed-notebooks
          path: docs/*.ipynb
          retention-days: 30
